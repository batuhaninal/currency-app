@using Helpers
@model List<UserAssetWithGroupResponse>
@{
    Layout = "_Layout";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-12 col-md-6 col-lg-4 mb-4">
            <div class="card card-primary card-outline h-100">
                <!--begin::Header-->
                <div class="card-header">
                    @if (item.Currency is not null)
                    {
                        <div class="card-title">
                            @item.Currency.Title
                            @if (!string.IsNullOrWhiteSpace(item.Currency.SubTitle))
                            {
                                <small class="text-muted">(@item.Currency.SubTitle)</small>
                            }
                        </div>
                        <div class="ms-auto text-end">
                            <div><strong>Alış:</strong> @item.Currency.PurchasePrice.ToString("N2")</div>
                            <div><strong>Satış:</strong> @item.Currency.SalePrice.ToString("N2")</div>
                        </div>
                    }
                    else
                    {
                        <div class="card-title text-danger">Para Birimi Bilgisi Yok</div>
                    }
                </div>
                <!--end::Header-->

                <!--begin::Body-->
                <div class="card-body">
                    <ul class="list-unstyled">
                        <li><strong>Adet:</strong> @item.Count</li>
                        <li><strong>Satin Alindigi Alis Toplam Deger:</strong> @UIToolHelper.RenderTL(item.TotalPurchaseValue)</li>
                        <li><strong>Satin Alindigi Satis Toplam Deger:</strong> @UIToolHelper.RenderTL(item.TotalSaleValue)</li>
                        <li><strong>Eklendiği Tarihteki Alış Bakiyesi:</strong>
                            @UIToolHelper.RenderTL(item.TotalCurrentPurchaseValue)</li>
                        <li><strong>Eklendiği Tarihteki Satış Bakiyesi:</strong> @UIToolHelper.RenderTL(item.TotalCurrentSaleValue)
                        </li>
                        <li><strong>Guncel Satış Bakiyesi:</strong> @UIToolHelper.RenderTL(item.Currency!.SalePrice * item.Count)
                        </li>
                        <li><strong>Guncel Alis Bakiyesi:</strong> @UIToolHelper.RenderTL(item.Currency!.PurchasePrice * item.Count)
                        </li>
                    </ul>
                </div>
                <!--end::Body-->
                @if (item.CurrencyHistories != null && item.CurrencyHistories.Any())
                {
                    <div class="card-footer text-center">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">@item.Currency!.Title Fiyat Geçmişi (Saatlik)</h3>
                            </div>
                            <div class="card-body">
                                <canvas id="price-history-hourly-@item.CurrencyId"></canvas>
                            </div>
                        </div>
                    </div>
                    <script>
                        new Chart(document.getElementById('price-history-hourly-@item.CurrencyId').getContext('2d'), {
                            type: 'line',
                            data: {
                                labels: @Html.Raw(Json.Serialize(item.CurrencyHistories!.Select(x => x.UpdatedDate.ToString("yyyy-MM-dd HH:mm")))),
                                datasets: [
                                    {
                                        label: 'Alış Fiyatı',
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        data: @Html.Raw(Json.Serialize(item.CurrencyHistories!.Select(x => x.NewPurchasePrice))),
                                        fill: false
                                    },
                                    {
                                        label: 'Satış Fiyatı',
                                        borderColor: 'rgba(255, 99, 132, 1)',
                                        data: @Html.Raw(Json.Serialize(item.CurrencyHistories!.Select(x => x.NewSalePrice))),
                                        fill: false
                                    }
                                ]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: false
                                    }
                                }
                            }
                        })
                    </script>
                }
                else
                {
                    <small class="text-muted">Currency geçmişi ayrı yerde gösterilebilir</small>
                }
            </div>
        </div>
    }
</div>
